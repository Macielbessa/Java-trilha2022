Herança e encapsulamento faz parte dos pilares do POO:
o que é herança?
 Assim como um filho pode herdar alguma característica do pai, na Orientação a Objetos é permitido que uma classe herde atributos e métodos da outra classe
 observação: Os modificadores de acessos das classes, métodos e atributos só podem estar com visibilidade public e protected para que sejam herdados.

o que é encapsulamento?
É a técnica utilizada para esconder uma ideia, ou seja, não expôr detalhes internos para o usuário, tornando partes do sistema mais independentes possível.
observação: Em um processo de encapsulamento os atributos das classes são do tipo private. Para acessar esses tipos de modificadores, é necessário criar métodos setters e getters.

outro ponto: o que é uma classe abstrata e uma interface
abstrata:1. Não suporta Herança Múltipla
         2. Pode conter métodos concretos ou abstratos: Isso quer dizer que todos os métodos de uma classe abstrata podem ser tanto concretos como, também, todos podem ser abstratos;
         3. Pode conter atributos de todos os tipos

Interface:1. Suporta Herança Múltipla: Uma classe pode implementar múltiplas interfaces;
2. Permite apenas métodos abstratos: Nenhum método com implementação. Temos algumas exceções que chegaram com o Java 8, mas essa é a ideia principal;
3. Não contém atributos: Essa é outra regra que possui uma exceção. Enquanto é comum ouvirmos que interfaces não guardam o estado da classe por não suportarem a instância de atributos, elas ainda podem conter atributos constantes de classe (public static final);
4. Não contém construtor

Extends vs Implements: qual a diferença?
extendsé para estender uma classe.

implementsé para implementar uma interface

A diferença entre uma interface e uma classe regular é que,
em uma interface, você não pode implementar nenhum dos métodos declarados. Somente a classe que "implementa" a interface pode implementar os métodos.